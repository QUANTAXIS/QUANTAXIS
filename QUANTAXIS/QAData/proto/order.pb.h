// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef PROTOBUF_order_2eproto__INCLUDED
#define PROTOBUF_order_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class QA_Market_bid;
class QA_Market_bidDefaultTypeInternal;
extern QA_Market_bidDefaultTypeInternal _QA_Market_bid_default_instance_;

namespace protobuf_order_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_order_2eproto

// ===================================================================

class QA_Market_bid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QA_Market_bid) */ {
 public:
  QA_Market_bid();
  virtual ~QA_Market_bid();

  QA_Market_bid(const QA_Market_bid& from);

  inline QA_Market_bid& operator=(const QA_Market_bid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QA_Market_bid(QA_Market_bid&& from) noexcept
    : QA_Market_bid() {
    *this = ::std::move(from);
  }

  inline QA_Market_bid& operator=(QA_Market_bid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QA_Market_bid& default_instance();

  static inline const QA_Market_bid* internal_default_instance() {
    return reinterpret_cast<const QA_Market_bid*>(
               &_QA_Market_bid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QA_Market_bid* other);
  friend void swap(QA_Market_bid& a, QA_Market_bid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QA_Market_bid* New() const PROTOBUF_FINAL { return New(NULL); }

  QA_Market_bid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QA_Market_bid& from);
  void MergeFrom(const QA_Market_bid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QA_Market_bid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string date = 2;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // string datetime = 3;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 3;
  const ::std::string& datetime() const;
  void set_datetime(const ::std::string& value);
  #if LANG_CXX11
  void set_datetime(::std::string&& value);
  #endif
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  ::std::string* mutable_datetime();
  ::std::string* release_datetime();
  void set_allocated_datetime(::std::string* datetime);

  // string sending_time = 4;
  void clear_sending_time();
  static const int kSendingTimeFieldNumber = 4;
  const ::std::string& sending_time() const;
  void set_sending_time(const ::std::string& value);
  #if LANG_CXX11
  void set_sending_time(::std::string&& value);
  #endif
  void set_sending_time(const char* value);
  void set_sending_time(const char* value, size_t size);
  ::std::string* mutable_sending_time();
  ::std::string* release_sending_time();
  void set_allocated_sending_time(::std::string* sending_time);

  // string transact_time = 5;
  void clear_transact_time();
  static const int kTransactTimeFieldNumber = 5;
  const ::std::string& transact_time() const;
  void set_transact_time(const ::std::string& value);
  #if LANG_CXX11
  void set_transact_time(::std::string&& value);
  #endif
  void set_transact_time(const char* value);
  void set_transact_time(const char* value, size_t size);
  ::std::string* mutable_transact_time();
  ::std::string* release_transact_time();
  void set_allocated_transact_time(::std::string* transact_time);

  // string code = 8;
  void clear_code();
  static const int kCodeFieldNumber = 8;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string user = 9;
  void clear_user();
  static const int kUserFieldNumber = 9;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string strategy = 10;
  void clear_strategy();
  static const int kStrategyFieldNumber = 10;
  const ::std::string& strategy() const;
  void set_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_strategy(::std::string&& value);
  #endif
  void set_strategy(const char* value);
  void set_strategy(const char* value, size_t size);
  ::std::string* mutable_strategy();
  ::std::string* release_strategy();
  void set_allocated_strategy(::std::string* strategy);

  // string type = 11;
  void clear_type();
  static const int kTypeFieldNumber = 11;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string bid_model = 12;
  void clear_bid_model();
  static const int kBidModelFieldNumber = 12;
  const ::std::string& bid_model() const;
  void set_bid_model(const ::std::string& value);
  #if LANG_CXX11
  void set_bid_model(::std::string&& value);
  #endif
  void set_bid_model(const char* value);
  void set_bid_model(const char* value, size_t size);
  ::std::string* mutable_bid_model();
  ::std::string* release_bid_model();
  void set_allocated_bid_model(::std::string* bid_model);

  // string amount_model = 13;
  void clear_amount_model();
  static const int kAmountModelFieldNumber = 13;
  const ::std::string& amount_model() const;
  void set_amount_model(const ::std::string& value);
  #if LANG_CXX11
  void set_amount_model(::std::string&& value);
  #endif
  void set_amount_model(const char* value);
  void set_amount_model(const char* value, size_t size);
  ::std::string* mutable_amount_model();
  ::std::string* release_amount_model();
  void set_allocated_amount_model(::std::string* amount_model);

  // string order_id = 14;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 14;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // string trade_id = 15;
  void clear_trade_id();
  static const int kTradeIdFieldNumber = 15;
  const ::std::string& trade_id() const;
  void set_trade_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trade_id(::std::string&& value);
  #endif
  void set_trade_id(const char* value);
  void set_trade_id(const char* value, size_t size);
  ::std::string* mutable_trade_id();
  ::std::string* release_trade_id();
  void set_allocated_trade_id(::std::string* trade_id);

  // string status = 16;
  void clear_status();
  static const int kStatusFieldNumber = 16;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // float price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  float price() const;
  void set_price(float value);

  // float amount = 6;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  float amount() const;
  void set_amount(float value);

  // int64 towards = 7;
  void clear_towards();
  static const int kTowardsFieldNumber = 7;
  ::google::protobuf::int64 towards() const;
  void set_towards(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:QA_Market_bid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr datetime_;
  ::google::protobuf::internal::ArenaStringPtr sending_time_;
  ::google::protobuf::internal::ArenaStringPtr transact_time_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr strategy_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr bid_model_;
  ::google::protobuf::internal::ArenaStringPtr amount_model_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr trade_id_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  float price_;
  float amount_;
  ::google::protobuf::int64 towards_;
  mutable int _cached_size_;
  friend struct protobuf_order_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QA_Market_bid

// float price = 1;
inline void QA_Market_bid::clear_price() {
  price_ = 0;
}
inline float QA_Market_bid::price() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.price)
  return price_;
}
inline void QA_Market_bid::set_price(float value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:QA_Market_bid.price)
}

// string date = 2;
inline void QA_Market_bid::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::date() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.date)
  return date_.GetNoArena();
}
inline void QA_Market_bid::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.date)
}
#if LANG_CXX11
inline void QA_Market_bid::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.date)
}
#endif
inline void QA_Market_bid::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.date)
}
inline void QA_Market_bid::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.date)
}
inline ::std::string* QA_Market_bid::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_date() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.date)
}

// string datetime = 3;
inline void QA_Market_bid::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::datetime() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.datetime)
  return datetime_.GetNoArena();
}
inline void QA_Market_bid::set_datetime(const ::std::string& value) {
  
  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.datetime)
}
#if LANG_CXX11
inline void QA_Market_bid::set_datetime(::std::string&& value) {
  
  datetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.datetime)
}
#endif
inline void QA_Market_bid::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.datetime)
}
inline void QA_Market_bid::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.datetime)
}
inline ::std::string* QA_Market_bid::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.datetime)
  return datetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_datetime() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.datetime)
  
  return datetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_datetime(::std::string* datetime) {
  if (datetime != NULL) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.datetime)
}

// string sending_time = 4;
inline void QA_Market_bid::clear_sending_time() {
  sending_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::sending_time() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.sending_time)
  return sending_time_.GetNoArena();
}
inline void QA_Market_bid::set_sending_time(const ::std::string& value) {
  
  sending_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.sending_time)
}
#if LANG_CXX11
inline void QA_Market_bid::set_sending_time(::std::string&& value) {
  
  sending_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.sending_time)
}
#endif
inline void QA_Market_bid::set_sending_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sending_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.sending_time)
}
inline void QA_Market_bid::set_sending_time(const char* value, size_t size) {
  
  sending_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.sending_time)
}
inline ::std::string* QA_Market_bid::mutable_sending_time() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.sending_time)
  return sending_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_sending_time() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.sending_time)
  
  return sending_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_sending_time(::std::string* sending_time) {
  if (sending_time != NULL) {
    
  } else {
    
  }
  sending_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sending_time);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.sending_time)
}

// string transact_time = 5;
inline void QA_Market_bid::clear_transact_time() {
  transact_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::transact_time() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.transact_time)
  return transact_time_.GetNoArena();
}
inline void QA_Market_bid::set_transact_time(const ::std::string& value) {
  
  transact_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.transact_time)
}
#if LANG_CXX11
inline void QA_Market_bid::set_transact_time(::std::string&& value) {
  
  transact_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.transact_time)
}
#endif
inline void QA_Market_bid::set_transact_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transact_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.transact_time)
}
inline void QA_Market_bid::set_transact_time(const char* value, size_t size) {
  
  transact_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.transact_time)
}
inline ::std::string* QA_Market_bid::mutable_transact_time() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.transact_time)
  return transact_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_transact_time() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.transact_time)
  
  return transact_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_transact_time(::std::string* transact_time) {
  if (transact_time != NULL) {
    
  } else {
    
  }
  transact_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transact_time);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.transact_time)
}

// float amount = 6;
inline void QA_Market_bid::clear_amount() {
  amount_ = 0;
}
inline float QA_Market_bid::amount() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.amount)
  return amount_;
}
inline void QA_Market_bid::set_amount(float value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:QA_Market_bid.amount)
}

// int64 towards = 7;
inline void QA_Market_bid::clear_towards() {
  towards_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QA_Market_bid::towards() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.towards)
  return towards_;
}
inline void QA_Market_bid::set_towards(::google::protobuf::int64 value) {
  
  towards_ = value;
  // @@protoc_insertion_point(field_set:QA_Market_bid.towards)
}

// string code = 8;
inline void QA_Market_bid::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::code() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.code)
  return code_.GetNoArena();
}
inline void QA_Market_bid::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.code)
}
#if LANG_CXX11
inline void QA_Market_bid::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.code)
}
#endif
inline void QA_Market_bid::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.code)
}
inline void QA_Market_bid::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.code)
}
inline ::std::string* QA_Market_bid::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_code() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.code)
}

// string user = 9;
inline void QA_Market_bid::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::user() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.user)
  return user_.GetNoArena();
}
inline void QA_Market_bid::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.user)
}
#if LANG_CXX11
inline void QA_Market_bid::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.user)
}
#endif
inline void QA_Market_bid::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.user)
}
inline void QA_Market_bid::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.user)
}
inline ::std::string* QA_Market_bid::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_user() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.user)
}

// string strategy = 10;
inline void QA_Market_bid::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::strategy() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.strategy)
  return strategy_.GetNoArena();
}
inline void QA_Market_bid::set_strategy(const ::std::string& value) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.strategy)
}
#if LANG_CXX11
inline void QA_Market_bid::set_strategy(::std::string&& value) {
  
  strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.strategy)
}
#endif
inline void QA_Market_bid::set_strategy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.strategy)
}
inline void QA_Market_bid::set_strategy(const char* value, size_t size) {
  
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.strategy)
}
inline ::std::string* QA_Market_bid::mutable_strategy() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_strategy() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.strategy)
  
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_strategy(::std::string* strategy) {
  if (strategy != NULL) {
    
  } else {
    
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.strategy)
}

// string type = 11;
inline void QA_Market_bid::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::type() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.type)
  return type_.GetNoArena();
}
inline void QA_Market_bid::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.type)
}
#if LANG_CXX11
inline void QA_Market_bid::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.type)
}
#endif
inline void QA_Market_bid::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.type)
}
inline void QA_Market_bid::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.type)
}
inline ::std::string* QA_Market_bid::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_type() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.type)
}

// string bid_model = 12;
inline void QA_Market_bid::clear_bid_model() {
  bid_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::bid_model() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.bid_model)
  return bid_model_.GetNoArena();
}
inline void QA_Market_bid::set_bid_model(const ::std::string& value) {
  
  bid_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.bid_model)
}
#if LANG_CXX11
inline void QA_Market_bid::set_bid_model(::std::string&& value) {
  
  bid_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.bid_model)
}
#endif
inline void QA_Market_bid::set_bid_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bid_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.bid_model)
}
inline void QA_Market_bid::set_bid_model(const char* value, size_t size) {
  
  bid_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.bid_model)
}
inline ::std::string* QA_Market_bid::mutable_bid_model() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.bid_model)
  return bid_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_bid_model() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.bid_model)
  
  return bid_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_bid_model(::std::string* bid_model) {
  if (bid_model != NULL) {
    
  } else {
    
  }
  bid_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid_model);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.bid_model)
}

// string amount_model = 13;
inline void QA_Market_bid::clear_amount_model() {
  amount_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::amount_model() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.amount_model)
  return amount_model_.GetNoArena();
}
inline void QA_Market_bid::set_amount_model(const ::std::string& value) {
  
  amount_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.amount_model)
}
#if LANG_CXX11
inline void QA_Market_bid::set_amount_model(::std::string&& value) {
  
  amount_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.amount_model)
}
#endif
inline void QA_Market_bid::set_amount_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  amount_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.amount_model)
}
inline void QA_Market_bid::set_amount_model(const char* value, size_t size) {
  
  amount_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.amount_model)
}
inline ::std::string* QA_Market_bid::mutable_amount_model() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.amount_model)
  return amount_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_amount_model() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.amount_model)
  
  return amount_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_amount_model(::std::string* amount_model) {
  if (amount_model != NULL) {
    
  } else {
    
  }
  amount_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount_model);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.amount_model)
}

// string order_id = 14;
inline void QA_Market_bid::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::order_id() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.order_id)
  return order_id_.GetNoArena();
}
inline void QA_Market_bid::set_order_id(const ::std::string& value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.order_id)
}
#if LANG_CXX11
inline void QA_Market_bid::set_order_id(::std::string&& value) {
  
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.order_id)
}
#endif
inline void QA_Market_bid::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.order_id)
}
inline void QA_Market_bid::set_order_id(const char* value, size_t size) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.order_id)
}
inline ::std::string* QA_Market_bid::mutable_order_id() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_order_id() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.order_id)
  
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    
  } else {
    
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.order_id)
}

// string trade_id = 15;
inline void QA_Market_bid::clear_trade_id() {
  trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::trade_id() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.trade_id)
  return trade_id_.GetNoArena();
}
inline void QA_Market_bid::set_trade_id(const ::std::string& value) {
  
  trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.trade_id)
}
#if LANG_CXX11
inline void QA_Market_bid::set_trade_id(::std::string&& value) {
  
  trade_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.trade_id)
}
#endif
inline void QA_Market_bid::set_trade_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.trade_id)
}
inline void QA_Market_bid::set_trade_id(const char* value, size_t size) {
  
  trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.trade_id)
}
inline ::std::string* QA_Market_bid::mutable_trade_id() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.trade_id)
  return trade_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_trade_id() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.trade_id)
  
  return trade_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_trade_id(::std::string* trade_id) {
  if (trade_id != NULL) {
    
  } else {
    
  }
  trade_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trade_id);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.trade_id)
}

// string status = 16;
inline void QA_Market_bid::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QA_Market_bid::status() const {
  // @@protoc_insertion_point(field_get:QA_Market_bid.status)
  return status_.GetNoArena();
}
inline void QA_Market_bid::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QA_Market_bid.status)
}
#if LANG_CXX11
inline void QA_Market_bid::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QA_Market_bid.status)
}
#endif
inline void QA_Market_bid::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QA_Market_bid.status)
}
inline void QA_Market_bid::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QA_Market_bid.status)
}
inline ::std::string* QA_Market_bid::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:QA_Market_bid.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QA_Market_bid::release_status() {
  // @@protoc_insertion_point(field_release:QA_Market_bid.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QA_Market_bid::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:QA_Market_bid.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_order_2eproto__INCLUDED
