// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock.proto

#ifndef PROTOBUF_stock_2eproto__INCLUDED
#define PROTOBUF_stock_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace stock {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_stock_2eproto();
void protobuf_AssignDesc_stock_2eproto();
void protobuf_ShutdownFile_stock_2eproto();

class stock_min;
class stock_info;

enum market_id {
  sh = 0,
  sz = 1
};
bool market_id_IsValid(int value);
const market_id market_id_MIN = sh;
const market_id market_id_MAX = sz;
const int market_id_ARRAYSIZE = market_id_MAX + 1;

const ::google::protobuf::EnumDescriptor* market_id_descriptor();
inline const ::std::string& market_id_Name(market_id value) {
  return ::google::protobuf::internal::NameOfEnum(
    market_id_descriptor(), value);
}
inline bool market_id_Parse(
    const ::std::string& name, market_id* value) {
  return ::google::protobuf::internal::ParseNamedEnum<market_id>(
    market_id_descriptor(), name, value);
}
// ===================================================================

class stock_min : public ::google::protobuf::Message {
 public:
  stock_min();
  virtual ~stock_min();

  stock_min(const stock_min& from);

  inline stock_min& operator=(const stock_min& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stock_min& default_instance();

  void Swap(stock_min* other);

  // implements Message ----------------------------------------------

  stock_min* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stock_min& from);
  void MergeFrom(const stock_min& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float high = 1;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 1;
  inline float high() const;
  inline void set_high(float value);

  // required float low = 2;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 2;
  inline float low() const;
  inline void set_low(float value);

  // required float open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline float open() const;
  inline void set_open(float value);

  // required float close = 4;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline float close() const;
  inline void set_close(float value);

  // required float volume = 5;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 5;
  inline float volume() const;
  inline void set_volume(float value);

  // required string bartime = 6;
  inline bool has_bartime() const;
  inline void clear_bartime();
  static const int kBartimeFieldNumber = 6;
  inline const ::std::string& bartime() const;
  inline void set_bartime(const ::std::string& value);
  inline void set_bartime(const char* value);
  inline void set_bartime(const char* value, size_t size);
  inline ::std::string* mutable_bartime();
  inline ::std::string* release_bartime();
  inline void set_allocated_bartime(::std::string* bartime);

  // required string barendtime = 7;
  inline bool has_barendtime() const;
  inline void clear_barendtime();
  static const int kBarendtimeFieldNumber = 7;
  inline const ::std::string& barendtime() const;
  inline void set_barendtime(const ::std::string& value);
  inline void set_barendtime(const char* value);
  inline void set_barendtime(const char* value, size_t size);
  inline ::std::string* mutable_barendtime();
  inline ::std::string* release_barendtime();
  inline void set_allocated_barendtime(::std::string* barendtime);

  // required float turnover = 8;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 8;
  inline float turnover() const;
  inline void set_turnover(float value);

  // required string day = 9;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 9;
  inline const ::std::string& day() const;
  inline void set_day(const ::std::string& value);
  inline void set_day(const char* value);
  inline void set_day(const char* value, size_t size);
  inline ::std::string* mutable_day();
  inline ::std::string* release_day();
  inline void set_allocated_day(::std::string* day);

  // @@protoc_insertion_point(class_scope:stock.stock_min)
 private:
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_bartime();
  inline void clear_has_bartime();
  inline void set_has_barendtime();
  inline void clear_has_barendtime();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float high_;
  float low_;
  float open_;
  float close_;
  ::std::string* bartime_;
  float volume_;
  float turnover_;
  ::std::string* barendtime_;
  ::std::string* day_;
  friend void  protobuf_AddDesc_stock_2eproto();
  friend void protobuf_AssignDesc_stock_2eproto();
  friend void protobuf_ShutdownFile_stock_2eproto();

  void InitAsDefaultInstance();
  static stock_min* default_instance_;
};
// -------------------------------------------------------------------

class stock_info : public ::google::protobuf::Message {
 public:
  stock_info();
  virtual ~stock_info();

  stock_info(const stock_info& from);

  inline stock_info& operator=(const stock_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stock_info& default_instance();

  void Swap(stock_info* other);

  // implements Message ----------------------------------------------

  stock_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stock_info& from);
  void MergeFrom(const stock_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .stock.market_id type = 1 [default = sh];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::stock::market_id type() const;
  inline void set_type(::stock::market_id value);

  // @@protoc_insertion_point(class_scope:stock.stock_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_stock_2eproto();
  friend void protobuf_AssignDesc_stock_2eproto();
  friend void protobuf_ShutdownFile_stock_2eproto();

  void InitAsDefaultInstance();
  static stock_info* default_instance_;
};
// ===================================================================


// ===================================================================

// stock_min

// required float high = 1;
inline bool stock_min::has_high() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stock_min::set_has_high() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stock_min::clear_has_high() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stock_min::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline float stock_min::high() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.high)
  return high_;
}
inline void stock_min::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:stock.stock_min.high)
}

// required float low = 2;
inline bool stock_min::has_low() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stock_min::set_has_low() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stock_min::clear_has_low() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stock_min::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline float stock_min::low() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.low)
  return low_;
}
inline void stock_min::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:stock.stock_min.low)
}

// required float open = 3;
inline bool stock_min::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stock_min::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stock_min::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stock_min::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline float stock_min::open() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.open)
  return open_;
}
inline void stock_min::set_open(float value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:stock.stock_min.open)
}

// required float close = 4;
inline bool stock_min::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stock_min::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stock_min::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stock_min::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float stock_min::close() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.close)
  return close_;
}
inline void stock_min::set_close(float value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:stock.stock_min.close)
}

// required float volume = 5;
inline bool stock_min::has_volume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stock_min::set_has_volume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stock_min::clear_has_volume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stock_min::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline float stock_min::volume() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.volume)
  return volume_;
}
inline void stock_min::set_volume(float value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:stock.stock_min.volume)
}

// required string bartime = 6;
inline bool stock_min::has_bartime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stock_min::set_has_bartime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stock_min::clear_has_bartime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stock_min::clear_bartime() {
  if (bartime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bartime_->clear();
  }
  clear_has_bartime();
}
inline const ::std::string& stock_min::bartime() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.bartime)
  return *bartime_;
}
inline void stock_min::set_bartime(const ::std::string& value) {
  set_has_bartime();
  if (bartime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bartime_ = new ::std::string;
  }
  bartime_->assign(value);
  // @@protoc_insertion_point(field_set:stock.stock_min.bartime)
}
inline void stock_min::set_bartime(const char* value) {
  set_has_bartime();
  if (bartime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bartime_ = new ::std::string;
  }
  bartime_->assign(value);
  // @@protoc_insertion_point(field_set_char:stock.stock_min.bartime)
}
inline void stock_min::set_bartime(const char* value, size_t size) {
  set_has_bartime();
  if (bartime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bartime_ = new ::std::string;
  }
  bartime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stock.stock_min.bartime)
}
inline ::std::string* stock_min::mutable_bartime() {
  set_has_bartime();
  if (bartime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bartime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stock.stock_min.bartime)
  return bartime_;
}
inline ::std::string* stock_min::release_bartime() {
  clear_has_bartime();
  if (bartime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bartime_;
    bartime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stock_min::set_allocated_bartime(::std::string* bartime) {
  if (bartime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bartime_;
  }
  if (bartime) {
    set_has_bartime();
    bartime_ = bartime;
  } else {
    clear_has_bartime();
    bartime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stock.stock_min.bartime)
}

// required string barendtime = 7;
inline bool stock_min::has_barendtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stock_min::set_has_barendtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stock_min::clear_has_barendtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stock_min::clear_barendtime() {
  if (barendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barendtime_->clear();
  }
  clear_has_barendtime();
}
inline const ::std::string& stock_min::barendtime() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.barendtime)
  return *barendtime_;
}
inline void stock_min::set_barendtime(const ::std::string& value) {
  set_has_barendtime();
  if (barendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barendtime_ = new ::std::string;
  }
  barendtime_->assign(value);
  // @@protoc_insertion_point(field_set:stock.stock_min.barendtime)
}
inline void stock_min::set_barendtime(const char* value) {
  set_has_barendtime();
  if (barendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barendtime_ = new ::std::string;
  }
  barendtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:stock.stock_min.barendtime)
}
inline void stock_min::set_barendtime(const char* value, size_t size) {
  set_has_barendtime();
  if (barendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barendtime_ = new ::std::string;
  }
  barendtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stock.stock_min.barendtime)
}
inline ::std::string* stock_min::mutable_barendtime() {
  set_has_barendtime();
  if (barendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barendtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stock.stock_min.barendtime)
  return barendtime_;
}
inline ::std::string* stock_min::release_barendtime() {
  clear_has_barendtime();
  if (barendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = barendtime_;
    barendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stock_min::set_allocated_barendtime(::std::string* barendtime) {
  if (barendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete barendtime_;
  }
  if (barendtime) {
    set_has_barendtime();
    barendtime_ = barendtime;
  } else {
    clear_has_barendtime();
    barendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stock.stock_min.barendtime)
}

// required float turnover = 8;
inline bool stock_min::has_turnover() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stock_min::set_has_turnover() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stock_min::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stock_min::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline float stock_min::turnover() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.turnover)
  return turnover_;
}
inline void stock_min::set_turnover(float value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:stock.stock_min.turnover)
}

// required string day = 9;
inline bool stock_min::has_day() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stock_min::set_has_day() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stock_min::clear_has_day() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stock_min::clear_day() {
  if (day_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    day_->clear();
  }
  clear_has_day();
}
inline const ::std::string& stock_min::day() const {
  // @@protoc_insertion_point(field_get:stock.stock_min.day)
  return *day_;
}
inline void stock_min::set_day(const ::std::string& value) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    day_ = new ::std::string;
  }
  day_->assign(value);
  // @@protoc_insertion_point(field_set:stock.stock_min.day)
}
inline void stock_min::set_day(const char* value) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    day_ = new ::std::string;
  }
  day_->assign(value);
  // @@protoc_insertion_point(field_set_char:stock.stock_min.day)
}
inline void stock_min::set_day(const char* value, size_t size) {
  set_has_day();
  if (day_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    day_ = new ::std::string;
  }
  day_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stock.stock_min.day)
}
inline ::std::string* stock_min::mutable_day() {
  set_has_day();
  if (day_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    day_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stock.stock_min.day)
  return day_;
}
inline ::std::string* stock_min::release_day() {
  clear_has_day();
  if (day_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = day_;
    day_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stock_min::set_allocated_day(::std::string* day) {
  if (day_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete day_;
  }
  if (day) {
    set_has_day();
    day_ = day;
  } else {
    clear_has_day();
    day_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stock.stock_min.day)
}

// -------------------------------------------------------------------

// stock_info

// required .stock.market_id type = 1 [default = sh];
inline bool stock_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stock_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stock_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stock_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::stock::market_id stock_info::type() const {
  // @@protoc_insertion_point(field_get:stock.stock_info.type)
  return static_cast< ::stock::market_id >(type_);
}
inline void stock_info::set_type(::stock::market_id value) {
  assert(::stock::market_id_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:stock.stock_info.type)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stock

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::stock::market_id> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock::market_id>() {
  return ::stock::market_id_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stock_2eproto__INCLUDED
