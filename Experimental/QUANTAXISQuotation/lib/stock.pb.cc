// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stock {

namespace {

const ::google::protobuf::Descriptor* stock_min_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stock_min_reflection_ = NULL;
const ::google::protobuf::Descriptor* stock_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stock_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* market_id_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_stock_2eproto() {
  protobuf_AddDesc_stock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stock.proto");
  GOOGLE_CHECK(file != NULL);
  stock_min_descriptor_ = file->message_type(0);
  static const int stock_min_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, bartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, barendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, day_),
  };
  stock_min_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stock_min_descriptor_,
      stock_min::default_instance_,
      stock_min_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_min, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stock_min));
  stock_info_descriptor_ = file->message_type(1);
  static const int stock_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_info, type_),
  };
  stock_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stock_info_descriptor_,
      stock_info::default_instance_,
      stock_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stock_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stock_info));
  market_id_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stock_min_descriptor_, &stock_min::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stock_info_descriptor_, &stock_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stock_2eproto() {
  delete stock_min::default_instance_;
  delete stock_min_reflection_;
  delete stock_info::default_instance_;
  delete stock_info_reflection_;
}

void protobuf_AddDesc_stock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013stock.proto\022\005stock\"\227\001\n\tstock_min\022\014\n\004hi"
    "gh\030\001 \002(\002\022\013\n\003low\030\002 \002(\002\022\014\n\004open\030\003 \002(\002\022\r\n\005c"
    "lose\030\004 \002(\002\022\016\n\006volume\030\005 \002(\002\022\017\n\007bartime\030\006 "
    "\002(\t\022\022\n\nbarendtime\030\007 \002(\t\022\020\n\010turnover\030\010 \002("
    "\002\022\013\n\003day\030\t \002(\t\"0\n\nstock_info\022\"\n\004type\030\001 \002"
    "(\0162\020.stock.market_id:\002sh*\033\n\tmarket_id\022\006\n"
    "\002sh\020\000\022\006\n\002sz\020\001", 253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stock.proto", &protobuf_RegisterTypes);
  stock_min::default_instance_ = new stock_min();
  stock_info::default_instance_ = new stock_info();
  stock_min::default_instance_->InitAsDefaultInstance();
  stock_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stock_2eproto {
  StaticDescriptorInitializer_stock_2eproto() {
    protobuf_AddDesc_stock_2eproto();
  }
} static_descriptor_initializer_stock_2eproto_;
const ::google::protobuf::EnumDescriptor* market_id_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return market_id_descriptor_;
}
bool market_id_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int stock_min::kHighFieldNumber;
const int stock_min::kLowFieldNumber;
const int stock_min::kOpenFieldNumber;
const int stock_min::kCloseFieldNumber;
const int stock_min::kVolumeFieldNumber;
const int stock_min::kBartimeFieldNumber;
const int stock_min::kBarendtimeFieldNumber;
const int stock_min::kTurnoverFieldNumber;
const int stock_min::kDayFieldNumber;
#endif  // !_MSC_VER

stock_min::stock_min()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock.stock_min)
}

void stock_min::InitAsDefaultInstance() {
}

stock_min::stock_min(const stock_min& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stock.stock_min)
}

void stock_min::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  high_ = 0;
  low_ = 0;
  open_ = 0;
  close_ = 0;
  volume_ = 0;
  bartime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  barendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  turnover_ = 0;
  day_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stock_min::~stock_min() {
  // @@protoc_insertion_point(destructor:stock.stock_min)
  SharedDtor();
}

void stock_min::SharedDtor() {
  if (bartime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bartime_;
  }
  if (barendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete barendtime_;
  }
  if (day_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete day_;
  }
  if (this != default_instance_) {
  }
}

void stock_min::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stock_min::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stock_min_descriptor_;
}

const stock_min& stock_min::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_2eproto();
  return *default_instance_;
}

stock_min* stock_min::default_instance_ = NULL;

stock_min* stock_min::New() const {
  return new stock_min;
}

void stock_min::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stock_min*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(high_, close_);
    ZR_(volume_, turnover_);
    if (has_bartime()) {
      if (bartime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bartime_->clear();
      }
    }
    if (has_barendtime()) {
      if (barendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        barendtime_->clear();
      }
    }
  }
  if (has_day()) {
    if (day_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      day_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stock_min::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stock.stock_min)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float high = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_low;
        break;
      }

      // required float low = 2;
      case 2: {
        if (tag == 21) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_open;
        break;
      }

      // required float open = 3;
      case 3: {
        if (tag == 29) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_close;
        break;
      }

      // required float close = 4;
      case 4: {
        if (tag == 37) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_volume;
        break;
      }

      // required float volume = 5;
      case 5: {
        if (tag == 45) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bartime;
        break;
      }

      // required string bartime = 6;
      case 6: {
        if (tag == 50) {
         parse_bartime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bartime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bartime().data(), this->bartime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bartime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_barendtime;
        break;
      }

      // required string barendtime = 7;
      case 7: {
        if (tag == 58) {
         parse_barendtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_barendtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->barendtime().data(), this->barendtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "barendtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_turnover;
        break;
      }

      // required float turnover = 8;
      case 8: {
        if (tag == 69) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_day;
        break;
      }

      // required string day = 9;
      case 9: {
        if (tag == 74) {
         parse_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->day().data(), this->day().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "day");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stock.stock_min)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stock.stock_min)
  return false;
#undef DO_
}

void stock_min::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stock.stock_min)
  // required float high = 1;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->high(), output);
  }

  // required float low = 2;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->low(), output);
  }

  // required float open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->open(), output);
  }

  // required float close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->close(), output);
  }

  // required float volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->volume(), output);
  }

  // required string bartime = 6;
  if (has_bartime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bartime().data(), this->bartime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bartime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bartime(), output);
  }

  // required string barendtime = 7;
  if (has_barendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->barendtime().data(), this->barendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "barendtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->barendtime(), output);
  }

  // required float turnover = 8;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->turnover(), output);
  }

  // required string day = 9;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stock.stock_min)
}

::google::protobuf::uint8* stock_min::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock.stock_min)
  // required float high = 1;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->high(), target);
  }

  // required float low = 2;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->low(), target);
  }

  // required float open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->open(), target);
  }

  // required float close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->close(), target);
  }

  // required float volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->volume(), target);
  }

  // required string bartime = 6;
  if (has_bartime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bartime().data(), this->bartime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bartime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bartime(), target);
  }

  // required string barendtime = 7;
  if (has_barendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->barendtime().data(), this->barendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "barendtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->barendtime(), target);
  }

  // required float turnover = 8;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->turnover(), target);
  }

  // required string day = 9;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock.stock_min)
  return target;
}

int stock_min::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float high = 1;
    if (has_high()) {
      total_size += 1 + 4;
    }

    // required float low = 2;
    if (has_low()) {
      total_size += 1 + 4;
    }

    // required float open = 3;
    if (has_open()) {
      total_size += 1 + 4;
    }

    // required float close = 4;
    if (has_close()) {
      total_size += 1 + 4;
    }

    // required float volume = 5;
    if (has_volume()) {
      total_size += 1 + 4;
    }

    // required string bartime = 6;
    if (has_bartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bartime());
    }

    // required string barendtime = 7;
    if (has_barendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->barendtime());
    }

    // required float turnover = 8;
    if (has_turnover()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string day = 9;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stock_min::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stock_min* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stock_min*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stock_min::MergeFrom(const stock_min& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_bartime()) {
      set_bartime(from.bartime());
    }
    if (from.has_barendtime()) {
      set_barendtime(from.barendtime());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stock_min::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stock_min::CopyFrom(const stock_min& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stock_min::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void stock_min::Swap(stock_min* other) {
  if (other != this) {
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(open_, other->open_);
    std::swap(close_, other->close_);
    std::swap(volume_, other->volume_);
    std::swap(bartime_, other->bartime_);
    std::swap(barendtime_, other->barendtime_);
    std::swap(turnover_, other->turnover_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stock_min::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stock_min_descriptor_;
  metadata.reflection = stock_min_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stock_info::kTypeFieldNumber;
#endif  // !_MSC_VER

stock_info::stock_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock.stock_info)
}

void stock_info::InitAsDefaultInstance() {
}

stock_info::stock_info(const stock_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stock.stock_info)
}

void stock_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stock_info::~stock_info() {
  // @@protoc_insertion_point(destructor:stock.stock_info)
  SharedDtor();
}

void stock_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stock_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stock_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stock_info_descriptor_;
}

const stock_info& stock_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_2eproto();
  return *default_instance_;
}

stock_info* stock_info::default_instance_ = NULL;

stock_info* stock_info::New() const {
  return new stock_info;
}

void stock_info::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stock_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stock.stock_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .stock.market_id type = 1 [default = sh];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::stock::market_id_IsValid(value)) {
            set_type(static_cast< ::stock::market_id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stock.stock_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stock.stock_info)
  return false;
#undef DO_
}

void stock_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stock.stock_info)
  // required .stock.market_id type = 1 [default = sh];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stock.stock_info)
}

::google::protobuf::uint8* stock_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock.stock_info)
  // required .stock.market_id type = 1 [default = sh];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock.stock_info)
  return target;
}

int stock_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .stock.market_id type = 1 [default = sh];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stock_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stock_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stock_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stock_info::MergeFrom(const stock_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stock_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stock_info::CopyFrom(const stock_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stock_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void stock_info::Swap(stock_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stock_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stock_info_descriptor_;
  metadata.reflection = stock_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stock

// @@protoc_insertion_point(global_scope)
